{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _Cell = _interopRequireDefault(require(\"../Cell\"));\n\nvar _TableContext = _interopRequireDefault(require(\"../context/TableContext\"));\n\nvar _BodyContext = _interopRequireDefault(require(\"../context/BodyContext\"));\n\nvar _valueUtil = require(\"../utils/valueUtil\");\n\nvar _ExpandedRow = _interopRequireDefault(require(\"./ExpandedRow\"));\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      renderIndex = props.renderIndex,\n      rowKey = props.rowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(_TableContext.default),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(_BodyContext.default),\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // ======================== Expandable =========================\n\n  var onExpandRef = React.useRef(onTriggerExpand);\n  onExpandRef.current = onTriggerExpand;\n\n  var onInternalTriggerExpand = function onInternalTriggerExpand() {\n    onExpandRef.current.apply(onExpandRef, arguments);\n  }; // =========================== onRow ===========================\n\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    var _additionalProps, _additionalProps$onCl;\n\n    if (expandRowByClick && mergedExpandable) {\n      onInternalTriggerExpand(record, event);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_additionalProps = additionalProps) === null || _additionalProps === void 0 ? void 0 : (_additionalProps$onCl = _additionalProps.onClick) === null || _additionalProps$onCl === void 0 ? void 0 : _additionalProps$onCl.call.apply(_additionalProps$onCl, [_additionalProps, event].concat(args));\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = (0, _valueUtil.getColumnsKey)(flattenColumns);\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, (0, _extends2.default)({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: (0, _classnames.default)(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onInternalTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return /*#__PURE__*/React.createElement(_Cell.default, (0, _extends2.default)({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      renderIndex: renderIndex,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate,\n      expanded: appendCellNode && expanded\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = /*#__PURE__*/React.createElement(_ExpandedRow.default, {\n      expanded: expanded,\n      className: (0, _classnames.default)(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      component: RowComponent,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length,\n      isEmpty: false\n    }, expandContent);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nvar _default = BodyRow;\nexports.default = _default;","map":{"version":3,"sources":["/home/rachmat/Documents/Emtres/bapenda-pajak/node_modules/rc-table/lib/Body/BodyRow.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","default","_extends2","_objectSpread2","_slicedToArray2","React","_classnames","_Cell","_TableContext","_BodyContext","_valueUtil","_ExpandedRow","BodyRow","props","className","style","record","index","renderIndex","rowKey","rowExpandable","expandedKeys","onRow","_props$indent","indent","RowComponent","rowComponent","cellComponent","childrenColumnName","_React$useContext","useContext","prefixCls","fixedInfoList","_React$useContext2","flattenColumns","expandableType","expandRowByClick","onTriggerExpand","rowClassName","expandedRowClassName","indentSize","expandIcon","expandedRowRender","expandIconColumnIndex","_React$useState","useState","_React$useState2","expandRended","setExpandRended","expanded","has","recordKey","useEffect","rowSupportExpand","nestExpandable","hasNestChildren","mergedExpandable","onExpandRef","useRef","current","onInternalTriggerExpand","apply","arguments","additionalProps","onClick","event","_additionalProps","_additionalProps$onCl","_len","length","args","Array","_key","call","concat","computeRowClassName","columnsKey","getColumnsKey","baseRowNode","createElement","map","column","colIndex","render","dataIndex","columnClassName","key","fixedInfo","appendCellNode","Fragment","paddingLeft","expandable","onExpand","additionalCellProps","onCell","ellipsis","align","component","shouldCellUpdate","appendNode","expandRowNode","expandContent","computedExpandedRowClassName","colSpan","isEmpty","displayName","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _Cell = _interopRequireDefault(require(\"../Cell\"));\n\nvar _TableContext = _interopRequireDefault(require(\"../context/TableContext\"));\n\nvar _BodyContext = _interopRequireDefault(require(\"../context/BodyContext\"));\n\nvar _valueUtil = require(\"../utils/valueUtil\");\n\nvar _ExpandedRow = _interopRequireDefault(require(\"./ExpandedRow\"));\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      renderIndex = props.renderIndex,\n      rowKey = props.rowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(_TableContext.default),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(_BodyContext.default),\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // ======================== Expandable =========================\n\n  var onExpandRef = React.useRef(onTriggerExpand);\n  onExpandRef.current = onTriggerExpand;\n\n  var onInternalTriggerExpand = function onInternalTriggerExpand() {\n    onExpandRef.current.apply(onExpandRef, arguments);\n  }; // =========================== onRow ===========================\n\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    var _additionalProps, _additionalProps$onCl;\n\n    if (expandRowByClick && mergedExpandable) {\n      onInternalTriggerExpand(record, event);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_additionalProps = additionalProps) === null || _additionalProps === void 0 ? void 0 : (_additionalProps$onCl = _additionalProps.onClick) === null || _additionalProps$onCl === void 0 ? void 0 : _additionalProps$onCl.call.apply(_additionalProps$onCl, [_additionalProps, event].concat(args));\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = (0, _valueUtil.getColumnsKey)(flattenColumns);\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, (0, _extends2.default)({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: (0, _classnames.default)(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onInternalTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return /*#__PURE__*/React.createElement(_Cell.default, (0, _extends2.default)({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      renderIndex: renderIndex,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate,\n      expanded: appendCellNode && expanded\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = /*#__PURE__*/React.createElement(_ExpandedRow.default, {\n      expanded: expanded,\n      className: (0, _classnames.default)(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      component: RowComponent,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length,\n      isEmpty: false\n    }, expandContent);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nvar _default = BodyRow;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}