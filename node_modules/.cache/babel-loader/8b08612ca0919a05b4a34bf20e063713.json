{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar data_1 = require(\"./data/data\");\n\nvar currencies_1 = require(\"./data/currencies\");\n\nfunction formatCurrency(data) {\n  var _a = data.amount,\n      amount = _a === void 0 ? 0 : _a,\n      country = data.country,\n      _b = data.maximumFractionDigits,\n      maximumFractionDigits = _b === void 0 ? 0 : _b,\n      _c = data.rates,\n      rates = _c === void 0 ? {} : _c;\n  var _d = data.from,\n      from = _d === void 0 ? 'USD' : _d,\n      _e = data.to,\n      to = _e === void 0 ? 'USD' : _e;\n  if (country) to = currencies_1.currencies[country] || 'USD';\n  from = from.toUpperCase();\n  to = to.toUpperCase();\n\n  if (!data_1.supportedCurrencies.includes(from) || !data_1.supportedCurrencies.includes(to)) {\n    return data_1.formattedPrice(from, amount + '');\n  }\n\n  if (from === to) {\n    return data_1.formattedPrice(from, amount + '');\n  }\n\n  if (rates && rates[to]) {\n    var convertedAmount = new Intl.NumberFormat(\"en-US\", {\n      style: \"decimal\",\n      maximumFractionDigits: maximumFractionDigits\n    }).format(amount * rates[to]);\n    console.log(convertedAmount);\n    return data_1.formattedPrice(to, convertedAmount);\n  }\n\n  return data_1.formattedPrice(from, amount + '');\n}\n\nexports.formatCurrency = formatCurrency;","map":{"version":3,"sources":["../src/formatter.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,SAAA,cAAA,CAA+B,IAA/B,EAAmD;AAE/C,MAAA,EAAA,GAAA,IAAA,CAAA,MAAA;AAAA,MAAA,MAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,EAAA;AAAA,MACA,OAAA,GAAA,IAAA,CAAA,OADA;AAAA,MAEA,EAAA,GAAA,IAAA,CAAA,qBAFA;AAAA,MAEA,qBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,EAFA;AAAA,MAGA,EAAA,GAAA,IAAA,CAAA,KAHA;AAAA,MAGA,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAHA;AAKI,MAAA,EAAA,GAAA,IAAA,CAAA,IAAA;AAAA,MAAA,IAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EAAA;AAAA,MAAc,EAAA,GAAA,IAAA,CAAA,EAAd;AAAA,MAAc,EAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EAAd;AACN,MAAI,OAAJ,EAAa,EAAE,GAAG,YAAA,CAAA,UAAA,CAAW,OAAX,KAAuB,KAA5B;AACb,EAAA,IAAI,GAAG,IAAI,CAAC,WAAL,EAAP;AACA,EAAA,EAAE,GAAG,EAAE,CAAC,WAAH,EAAL;;AACA,MACE,CAAC,MAAA,CAAA,mBAAA,CAAoB,QAApB,CAA6B,IAA7B,CAAD,IACA,CAAC,MAAA,CAAA,mBAAA,CAAoB,QAApB,CAA6B,EAA7B,CAFH,EAGE;AACA,WAAO,MAAA,CAAA,cAAA,CAAe,IAAf,EAAqB,MAAM,GAAG,EAA9B,CAAP;AACD;;AACD,MAAI,IAAI,KAAK,EAAb,EAAiB;AACf,WAAO,MAAA,CAAA,cAAA,CAAe,IAAf,EAAqB,MAAM,GAAG,EAA9B,CAAP;AACD;;AACD,MAAI,KAAK,IAAI,KAAK,CAAC,EAAD,CAAlB,EAAwB;AACtB,QAAM,eAAe,GAAG,IAAI,IAAI,CAAC,YAAT,CAAsB,OAAtB,EAA+B;AACrD,MAAA,KAAK,EAAE,SAD8C;AAErD,MAAA,qBAAqB,EAAA;AAFgC,KAA/B,EAGrB,MAHqB,CAGd,MAAM,GAAG,KAAK,CAAC,EAAD,CAHA,CAAxB;AAIA,IAAA,OAAO,CAAC,GAAR,CAAY,eAAZ;AAEA,WAAO,MAAA,CAAA,cAAA,CAAe,EAAf,EAAmB,eAAnB,CAAP;AACD;;AACD,SAAO,MAAA,CAAA,cAAA,CAAe,IAAf,EAAqB,MAAM,GAAG,EAA9B,CAAP;AACD;;AA9BD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar data_1 = require(\"./data/data\");\nvar currencies_1 = require(\"./data/currencies\");\nfunction formatCurrency(data) {\n    var _a = data.amount, amount = _a === void 0 ? 0 : _a, country = data.country, _b = data.maximumFractionDigits, maximumFractionDigits = _b === void 0 ? 0 : _b, _c = data.rates, rates = _c === void 0 ? {} : _c;\n    var _d = data.from, from = _d === void 0 ? 'USD' : _d, _e = data.to, to = _e === void 0 ? 'USD' : _e;\n    if (country)\n        to = currencies_1.currencies[country] || 'USD';\n    from = from.toUpperCase();\n    to = to.toUpperCase();\n    if (!data_1.supportedCurrencies.includes(from) ||\n        !data_1.supportedCurrencies.includes(to)) {\n        return data_1.formattedPrice(from, amount + '');\n    }\n    if (from === to) {\n        return data_1.formattedPrice(from, amount + '');\n    }\n    if (rates && rates[to]) {\n        var convertedAmount = new Intl.NumberFormat(\"en-US\", {\n            style: \"decimal\",\n            maximumFractionDigits: maximumFractionDigits,\n        }).format(amount * rates[to]);\n        console.log(convertedAmount);\n        return data_1.formattedPrice(to, convertedAmount);\n    }\n    return data_1.formattedPrice(from, amount + '');\n}\nexports.formatCurrency = formatCurrency;\n//# sourceMappingURL=formatter.js.map"]},"metadata":{},"sourceType":"script"}